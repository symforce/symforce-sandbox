#!/usr/bin/env php
<?php

	$project_dir	= dirname(__DIR__);
	chdir( $project_dir );
        
	$longopts  = array(
		'env:' ,
		'user::' , 
		'group::' ,
		'cache' ,
        'assetic' ,
		'verbose' ,
	);
	$options = getopt('e:u::g::x::v::a', $longopts);
	$getarg	= function($s, $l, $v = null, $match = null , $error = null ) use($options) {
		if( isset($options[$s] ) ) $v = $options[$s] ;
		else if( isset($options[$l] ) ) $v = $options[$l] ;
		if( $match && !preg_match( $match, $v ) ) {
			$msg	= sprintf( $error, $v);
			echo $msg, "\n";
			exit;
		} else if( false === $v ) {
                    $v  = true ;
                }
		return $v ;
	};
    $web_user   = null ;
    $web_group  = null ;
    $web_assets_dir = null ;
    $web_root_dir = null ;
    $read_web_parameter  = function( & $var , $match ) use ( $project_dir ){
         if( null !== $var ) return ;
         $files = array( $project_dir . '/app/config/parameters.yml' , $project_dir . '/app/config/parameters.yml.dist' ) ;
         foreach($files as $file ) {
             if( file_exists($file) ) {
                $data  = file_get_contents($file) ;
                preg_match('/sf\.web_' . $match . ':\s*(.+)\s/', $data, $ls);
                if( $ls && isset($ls[1]) ) {
                    $var    =  $ls[1] ;
                    if( preg_match('/^\'(.+)\'$/', $var, $_ls) ) {
                        $var = $_ls[1] ;
                    } else if( preg_match('/^\"(.+)\"$/', $var, $_ls) ) {
                        $var = $_ls[1] ;
                    }
                    break ;
                }
             }
         }
    };
    $read_web_parameter( $web_user , 'user' );
    $read_web_parameter( $web_group , 'group' );
    $read_web_parameter( $web_assets_dir , 'assets_dir' );
    $read_web_parameter( $web_root_dir , 'root_dir' );
    if( !$web_user ) $web_user  = 'www-data' ;
    if( !$web_group ) $web_group  = 'www-data' ;
    if( !$web_assets_dir ) $web_assets_dir  = '/assets' ;
    if( !$web_root_dir ) {
        $web_root_dir  =  'www' ;
    } else {
        $web_root_dir  = str_replace('%kernel.root_dir%/../',  '' , $web_root_dir) ;
    }

	$env	= $getarg('e', 'env', 'dev', '/^(prod|dev|test)$/',  'env:`%s` must be one of (dev, prod, test)' );
	$user   = $getarg('u', 'user', $web_user , '/^[\w\-\_]+$/',  'user:`%s` is valid' );
	$group	= $getarg('g', 'group', $web_group, '/^[\w\-\_]+$/',  'group:`%s` is valid');
	$cache	= $getarg('x', 'cache' );
    $assetic    = $getarg('a', 'assetic' ) ;
	$verbose    = $getarg('v', 'verbose' ) ? '-v': '' ;

    $is_dev = 'dev' === $env ;
        
    $exec   = function($cmd){
            echo ">>>: ", $cmd, "\n" ;
            passthru($cmd) ;
    };
        
	$exec("rm -rf app/cache/$env/profiler");
	
    if( $assetic || !$is_dev ) {
        $parameters_file   = $project_dir . '/app/config/parameters.yml' ;
        if( file_exists($parameters_file) ) {
            $parameters_data  = file_get_contents($parameters_file) ;
            $_parameters_data  = preg_replace_callback('/(\s+app\.version\s*\:).*/', function($ms){
                return $ms[1] . date(' YmdHis') ;
            } , $parameters_data) ;
            file_put_contents($parameters_file, $_parameters_data);
        }
        $exec("rm -rf app/cache/$env/*.* app/cache/$env/assetic") ;
        $exec("rm -rf {$web_root_dir}{$web_assets_dir} {$web_root_dir}/bundles");
    }

    if( !$is_dev || $cache ) {
        $exec("rm -rf app/cache/$env/annotations app/cache/$env/doctrine app/cache/$env/profiler app/cache/$env/translations app/cache/$env/twig") ;
        $exec("rm -rf app/cache/$env/SymforceLoader*") ;
        $exec("rm -rf app/Resources/views/* app/Resources/Symforce/*/* app/Resources/SymforceAdminBundle/translations/*.yaml") ;
    }

    if( !$is_dev ) {
        $exec("./app/console debug:router --env=$env " . $verbose) ;
        $exec("./app/console cache:warmup --env=$env " . $verbose);
        $exec("./app/console assetic:dump --env=$env --no-debug " . $verbose);
    }

    $exec("./app/console sf:core:assets --env=$env " . $verbose);

    $exec("chown -R $user:$group app/ bin/ src/ {$web_root_dir}/ composer.*");

    // composer.phar update --dev --prefer-dist -vvv
    // composer.phar dumpautoload -o
    // ./app/console sf:core:dump --watch --force -vvv
